System Calls.
==============

A system call is a request for service that a program makes of the kernel. The service is generally something that only the kernel has the privilege to do, such as doing I/O.users do not need to concern themselves with system calls as they will be all done virtually in a library .

for a system call to happen a number of steps are followed:


|user code|->|Intermediate Library|->|Kernel code|

First , The program calls the function in the user library , this function is responsible for indexing and passing the arguments of the
kernel function , then it issues and SYSCALL(0x30) interrupt 

Before going into code there's an important table to mention , that is the sys_call_table
The table contains function pointers to the kernel level system calls handlers.

fnptr_t sys_call_table[] =  { sys_exec ,
			      sys_fork ,
                              sys_printf 
			      ....
                            };

The first thing the call sets is the index for the correct function pointer in that table , indexes are defined in
include/sys.h


------------------------------------------------
	asm("movl %0,%%eax" :: "a"(S_PRINTF));   ;set call index
	asm("movl %0,%%ebx":: "a"(1));		 ;for the function
	asm("movl %0,%%ecx": :"=g"(str));	 ;function argument
	asm("int %0" : :"a"(0x30));		 ;SYSCALL interrupt
-----------------------------------------------
listing x-y printf.c
-----------------------------------------------

after the function issues the interrupt ,and the interrupt handler finds that it's a SYSCALL interrupt , it'll call map_syscall function
and pass the current cpu_stat structre to it , the function will index the sys_call_table and call the function with the arguments in ecx register
and return the return value (error code) of the call.
----------------------------------------------------
int32_t map_syscall(cpu_state_t *cpu_state)
{
	printk("System call issued \n");
	if(cpu_state->eax > n_calls );
	{
		printk("Bad system call code \n");
		return 1;
	}
	s_errno= (sys_call_table [cpu_state->eax])((char *)cpu_state->ecx);
	if(s_errno < 0 ) {return -s_errno;}  //error code		
	else {return 0;}
	       	
}
-----------------------------------------------------
listing x-y syscalls.c
-----------------------------------------------------



