3.2 Text/Video Mode
==========================

Almost all new kernels and operating systems access and use video mode using the VESA/VBE interface. to interface with the attached video card. however in CATernel we choosed to support legacy and old devices before supporting newer versions, therefore we choosed to use CGA(Color Graphic Adapter) to support video and console.
There's few differences between CGA and EGA and VGA.

3.2.1 CGA(Color Graphic Adapter)
================================
As mentioned earlier CGA is an old graphic adapter which we choosed to support first in CATernel. It supports two modes, Text mode and Graphic mode. for now we are only using the Text mode.

3.2.1.1 Text Mode
==================
CGA has two text modes with a fixed character size.
40x25 Mode : Each character is 8x8 dots size and has up to 16 colors with resolution of 320x200.
80x25 Mode : It has the same character size and same color count, but with 640x200 resolution.

on CATernel we will support the CGA in text mode(80x25).the memory storage is two bytes of video RAM used for each character. 1st byte is the character code and the 2nd is the attribute.a screen might be 2000 byte or 4000 byte (40*25*2) , (80*25*2). and CGA's video RAM is 16Kb. and of course all what we can output is ASCII.

---------------------------------------------------------
	bit 0 = Blue foreground
	bit 1 = Green foreground
	bit 2 = Red foreground
	bit 3 = Bright foreground
	bit 4 = Blue background
	bit 5 = Green background
	bit 6 = Red background
	bit 7 = Bright background (blink characters)
----------------------------------------------------------
	Listing 3.X Character color attributes
----------------------------------------------------------

To control screen cursor and lines two registered are used, Index and Data registers at address 0x3D4 and 0x3D5 respectively.if you took a look at video.c code you will find setters and getters for position. so position desired to read is supplied to index register which is 0xF for the first byte in the position and 0xE for the second byte.
and since we are working on a 80*25 then we wont need more than 4 bytes.for getting the value i read from the data register after specifying the index i want to read and i inb the value coming from the data port. for example: 
suppose the cursor position is at 0x5a0, so what you will first get is the first byte of the position which is 0xa0. and as you might have noticed we do no operations on that. but on the second position you get 0x05. the operations is for mixing the first byte and second byte so they would make 0x5a0.
also you may notice that CGA_BUFF_OFFSET. which is the offset of the CGA video RAM in memory.

cga_putc:
what i do here is that i put the character i want to type on the screen to the CGA video RAM. and since we are working on 80*25 resolution bytes after the offset 0xB87D0 wont be written to screen yet they will be written to video RAM. this issue can be handled using memory trick like...move all binaries from 0xB8080 to 0xB87D0 80 byte backward which is the row size in 80*25 resolution. and then move the cursor position 80 place backward.

cga_putstr:
this function passes a pointer to an array of characters which are passed in a loop character at a time till we reach the null terminator character.

