Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2012-09-20T20:36:30+02:00

====== 3.2.1 - ELF format ======
Created Thursday 20 September 2012

ELF stands for Executable and Linking Format. ELF is used in object files like (.o) files and shared libraries (.so) and (.kld) kernel loadable modules.
if you navigated to any of your (bin) directories and tried running the following command readelf -h (any executable file goes here) I've used /bin/ls as a file and that was the output.. 

ELF Header:
  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 
  Class:                             ELF32
  Data:                              2's complement, little endian
  Version:                           1 (current)
  OS/ABI:                            UNIX - System V
  ABI Version:                       0
  Type:                              EXEC (Executable file)
  Machine:                           Intel 80386
  Version:                           0x1
  Entry point address:               0x8049cd0
  Start of program headers:          52 (bytes into file)
  Start of section headers:          103368 (bytes into file)
  Flags:                             0x0
  Size of this header:               52 (bytes)
  Size of program headers:           32 (bytes)
  Number of program headers:         9
  Size of section headers:           40 (bytes)
  Number of section headers:         29
  Section header string table index: 28}

 Magic is the magic signature of ELF file that's how ELF files are identified, Let's go through our elf.h header and try to know what is that?

/* Start of Magic Definitions */
#define ELF_MAGIC 0x464C457F
#define MAGIC_LEN 16

#define M_CLASS_OFF 4   //File Class offset
#define M_CLASSNONE 0   //Invalid Class
#define M_CLASS32 1     //32-bit Objects
#define M_CLASS64 2     //64-bit Objects
#define M_CLASSNUM 3

#define M_DATA_OFF 5    //Data encoding byte offset
#define M_DATANONE 0    //Invalid Data encoding
#define M_DATA2LE       1       // 2's complement Little endian
#define M_DATA2BE 2     //2's complement Big endian
#define M_DATANUM 3

#define M_VERSION 6     //File version offset

#define M_OSABI 7               //OS/ABI offset
#define M_OSABI_SYSV 0  //Unix System V
#define M_OSABI_HPUX 1  //HP-UX

#define M_ABIVERSION 8  //ABI version offset
#define M_ELF_PADDING 9 //Padding bytes offset}

As you can see the ELF_MAGIC is the same 4 bytes as above but in little endian. the fifth byte is 0x01 which means that this file is in 32-bit format. sixth bit is also 0x01 which means that data are in 2's compelement format Little endian. the seventh bit is 0 because this is a unix system V.and finally ABI version is 0 at the eights offset. now try to hexdump the first 32 byte of the executable file. I got this myself 

saad@MachineOnLinux:~/CPrograms/CATernel$ hd -n 32 /bin/ls
00000000  7f 45 4c 46 01 01 01 00  00 00 00 00 00 00 00 00  |.ELF............|
00000010  02 00 03 00 01 00 00 00  d0 9c 04 08 34 00 00 00  |............4...|}

 Well..Let's take a look at our elf.h 

/* File types */
#define T_TYPE_NONE 0
#define T_TYPE_REL 1
#define T_TYPE_EXEC 2
#define T_TYPE_DYN 3
#define T_TYPE_CORE 4
#define T_TYPE_LOPROC 0xff00
#define T_TYPE_HIPROC 0xffff

/*Machine types "since i will only work in i386 i will def one value"*/
#define M_MACHINE_I386  3       //intel Machine}

 the two bytes at offset 0x10 which are 02 00 means that the type of this file is executable. the next two bytes are 03 00 which has the machine type. which means intel i386. and i only supported that in my elf.h. next two bytes has the version number which is 01 00..yet another snippet from our elf.h 

/* Version types */
#define V_VERSION_NONE 0
#define V_VERSION_CURRENT 1
#define V_VERSION_NUM 2}

skip the next two bytes, the four bytes at offset 0x18 which are d0 9c 04 08 are the entry point address for this code which is 0x08049cd0.
the next byte indicates the offset of start of program headers which is 0x34 = 52 in decimal.. ok let's hexdump more of that file! 
saad@MachineOnLinux:~/CPrograms/CATernel$ hd -n 128 /bin/ls
00000000  7f 45 4c 46 01 01 01 00  00 00 00 00 00 00 00 00  |.ELF............|
00000010  02 00 03 00 01 00 00 00  d0 9c 04 08 34 00 00 00  |............4...|
00000020  c8 93 01 00 00 00 00 00  34 00 20 00 09 00 28 00  |........4. ...(.|
00000030  1d 00 1c 00 06 00 00 00  34 00 00 00 34 80 04 08  |........4...4...|
00000040  34 80 04 08 20 01 00 00  20 01 00 00 05 00 00 00  |4... ... .......|
00000050  04 00 00 00 03 00 00 00  54 01 00 00 54 81 04 08  |........T...T...|
00000060  54 81 04 08 13 00 00 00  13 00 00 00 04 00 00 00  |T...............|
00000070  01 00 00 00 01 00 00 00  00 00 00 00 00 80 04 08  |................|}

the four bytes at offset 0x20 indicate the offset of section headers c8 93 01 00 which is 0x193c8 and 103368 in decimal. then the four flags bytes which are all zeroes. then the two bytes at offset 0x28 indicates the size of the elf header which is 0x34 and 52 bytes in decimal. and the next two bytes indicate the size of program headers which is 0x20 = 32 bytes in decimal. next two bytes are the number of program headers which are 9 headers. and then size of section headers which is 0x28 = 40 header. and then the number of section headers which are 0x1d or 29. and finally the string table index of the section header which is 28. 

* **Now to sections**

 You can easily know the sections in an ELF file using the following command 
saad@MachineOnLinux:~/CPrograms/CATernel$ readelf -S kern/kernel/kernel 
There are 11 section headers, starting at offset 0xa390:

Section Headers:
  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al
  [ 0]                   NULL            00000000 000000 000000 00      0   0  0
  [ 1] .text             PROGBITS        f0100000 001000 000c20 00  AX  0   0  4
  [ 2] .rodata           PROGBITS        f0100c20 001c20 000398 00   A  0   0  4
  [ 3] .stab             PROGBITS        f0100fb8 001fb8 000001 0c  WA  4   0  1
  [ 4] .stabstr          STRTAB          f0100fb9 001fb9 000001 00  WA  0   0  1
  [ 5] .data             PROGBITS        f0101000 002000 008320 00  WA  0   0 4096
  [ 6] .bss              NOBITS          f0109320 00a320 000616 00  WA  0   0  4
  [ 7] .comment          PROGBITS        00000000 00a320 000023 01  MS  0   0  1
  [ 8] .shstrtab         STRTAB          00000000 00a343 00004c 00      0   0  1
  [ 9] .symtab           SYMTAB          00000000 00a548 0004a0 10     10  36  4
  [10] .strtab           STRTAB          00000000 00a9e8 000282 00      0   0  1
Key to Flags:
  W (write), A (alloc), X (execute), M (merge), S (strings)
  I (info), L (link order), G (group), x (unknown)
  O (extra OS processing required) o (OS specific), p (processor specific)}

that's what I got! you see sections like NULL section..I dont care about that.. But you see the .text section Address 0xf0100000 which is the address where this section should be put into. and the Off which is the offset and size has the size of the section. and Flg indicates the section attributes which is AX(Section is readable and executable). Actually .text section mostly is the name of the section to be exectued into the Code segment. .data segment is the segment that has pre-defined variables..anyway every section has it's usage but now we only care about .text section. 

* **Now to program headers!**
Section headers table is not loaded into memory because kernel will not be able to use this table. using these sections is done via program headers.
simply running the next command gives you the program headers you have in your binary. 

saad@MachineOnLinux:~/CPrograms/CATernel$ readelf -W -l kern/kernel/kernel 

Elf file type is EXEC (Executable file)
Entry point 0xf0100014
There are 2 program headers, starting at offset 52

__Program Headers:__
__  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align__
__  LOAD           0x001000 0xf0100000 0xf0100000 0x09320 0x09936 RWE 0x1000__
__  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RWE 0x4__

__ Section to Segment mapping:__
__  Segment Sections...__
__   00     .text .rodata .stab .stabstr .data .bss __
__   01     }__

here we have only two program headers.. LOAD and GNU_STACK.
we are now just interested in the LOAD program header.
Enough ELFing! It's not yet chrismas!! *trollface*

