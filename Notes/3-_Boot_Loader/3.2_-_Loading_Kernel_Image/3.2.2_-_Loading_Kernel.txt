Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2012-09-20T20:48:36+02:00

====== 3.2.2 - Loading Kernel ======
Created Thursday 20 September 2012

 this is the code that loads the kernel from Hard disk (Read x86.h before you read this) 

#include 
#include 

#define SECTOR 512
#define ELFHDR ((struct elfhdr *) 0x10000)
void readsect(void*,uint32_t);
void readseg(uint32_t,uint32_t,uint32_t);
void
cmain(void)
{	
	struct proghdr *p,*p2;	// program headers;
	
	readseg((uint32_t) ELFHDR,SECTOR*8,0); // Load kernel from disk to memory
	if( ELFHDR->magic != ELF_MAGIC ) //Check if the kernel is ELF file format, if it doesn't match get the hell out
		goto getout;	
	

	p=(struct proghdr *) ( (uint8_t *) ELFHDR+ ELFHDR->phroff); // Load program segments
	p2= p + ELFHDR->phrnum;

	for (; p < p2 ; p++)
		//LOAD THEM INTO MEMORY	
		readseg(p->vaddr,p->memsz,p->offset);
	__asm __volatile("jmp	%%eax"::"a" ( (uint32_t *)((ELFHDR->entry)&0xffffff)));
	while(1);
getout:
	while(1);	
}
void
waitdisk(void){
	 while ((inb(0x1F7) & 0xC0) != 0x40);
}
void
readseg(uint32_t va,uint32_t count,uint32_t offset)
{
		
	uint32_t end_va;
	va &= 0xFFFFFF;
	end_va = va + count;	
	va &= ~(SECTOR -1);
	offset = (offset/SECTOR)+1;
	while(va < end_va) {
		readsect((uint8_t *)va,offset);
		va += SECTOR;
		offset++;
	}	
}

void
readsect(void *dst,uint32_t offset)
{
	waitdisk();
	outb(1,0x1F2);		// sector count 
	outb(offset,0x1F3); 	// sector number
	outb(offset >> 8 ,0x1F4); //Cylinder Low
	outb(offset >> 16,0x1F5); //Cylinder High
	outb( (offset >> 24) | (0xE0),0x1F6); 
	outb(0x20,0x1F7);	//Read sectors with a retry
	waitdisk();
	
	insl(dst,SECTOR/4,0x1F0); // Load binaries from disk to dst address (ELFHDR)
}}


first we read 8 sectors of the kernel, But how does this work?
readseg function is easy to guess, but the readsect function needs more explaination. first we wait till disk is available, then you pass to 0x1F2 one! which means you want to read one sector. then you pass the offset of the sector you want to read. then you pass the cylinder Low and high numbers. the Outb for 0x1F6 passes the head value. and on out operation for 0x1f7 you pass how you want to read the value and 0x20 means you want to read it with a retry. and finally you read them from the data register by repeating the insl instruction (check x86.h).
after loading the kernel we verify if it is an ELF image, if it is not we just do and infinite loop. then we load the program headers into memory and Dang we jump to the entry point and start executing our kernel. 

