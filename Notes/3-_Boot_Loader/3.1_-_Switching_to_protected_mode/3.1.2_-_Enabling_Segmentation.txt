Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2012-09-20T20:33:08+02:00

====== 3.1.2 - Enabling Segmentation ======
Created Thursday 20 September 2012

** GDT Table**
Then you load the GDT table into the GDT register via the lgdt instruction. But what is a GDT table? GDT table is used as a desciptor table...come on that is silly! I mean that in real mode you just address the memory with direct addressing via segments..Like this


	jmp	0000:7c00h
or..
	jmp	0002:0020h}

in protected mode you cannot do this. You cannot directly access segments. that's where GDT table comes in handy. in the GDT table is a table where all the segments are defined.yet they are not stored as values but as descriptors. Descriptors has full informations about a segment. and it's 64 bit long. If you navigated to CATernel/include/memvals.h you will find an ascii graph illustrating the GDT table but I will just put that here..

_{ HOW GDT register is used
 This is the GDT register
 ---------------------------------------------
|31                 16| 15                   0|
|                     |                       |
|     Base 0:15       |       Limit 0:15      |
|                     |                       |
|---------------------------------------------|
|63   56|55 52| 51  48|47      40|39        32|
| Base  |     | Limit | Access   |            |
| 24:31 |Flags| 16:19 | Byte     | Base 16:23 |
|       |     |       |          |          							  |
 ---------------------------------------------
 Access byte is
 byte 0 = Accessed bit set to 1 by CPU when segment is accessed. we will set it to 0
 byte 1 = read/write permissions 
 byte 2 = Direction bit we will set that to 0 for growing up segments and 1 for growing down segments and conforming bit
 byte 3 = Executable bit 1 if code segment 0 if data segment
 byte 4 = always 1
 byte 5,6 = Privilege since we are a kernel we will set that to 0
 byte 7 = Present bit one for anything}

This ASCII graph descripes exaclty what is a GDT descriptor. you see.. from the first bit till the bit 15, this is the place of the first 16 bits of the segment limit address. and from bit 16 to bit 31 it's the place of the first 16 bits of the segment base address. from bit 32 to 39 more 6 bits of the base address are placed. and then we go into the access bit which is demonstrated above, and the rest of the limit address of the segment. and Flags which is most of the time equal to 0x1100. evantually the rest of the base address!! indexing these descriptors is made by adding 0x8 for every descriptor. So first descriptor's index is 0x0, 2nd descriptor index is 0x8, 3rd descriptor index is 0x10...etc.
Let's Go back to our code. After loading the gdt address in the gdt register we set the protected mode in cr0 flag. and if you are using bochs you will see that message in the log after setting that flag..Here is a picture .


{{../../../images/protected_mode.png}}
you tried to skip this instruction via jumping to sping before it you'll get this instead....here is another picture .

{{../../../images/real_mode.png}}

Notice the first bit in every picture in cr0. 

