Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2012-09-20T21:07:30+02:00

====== 5.2 - CGA (Color Graphics Adapter) ======
Created Thursday 20 September 2012

on CATernel we will support the CGA in text mode.
we have two text modes (80x25) and (40x25), both has 8x8 pixel characters. result resolution is either 320x200 or 640x200 the memory storage is two bytes of video RAM used for each character. 1st byte is the character code and the 2nd is the attribute.
a screen might be 2000 byte or 4000 byte (40*25*2) , (80*25*2). and CGA's video RAM is 16Kb. and of course all what we can output is ASCII.

_{Here is the attribute byte specifications:-
	bit 0 = Blue foreground
	bit 1 = Green foreground
	bit 2 = Red foreground
	bit 3 = Bright foreground
	bit 4 = Blue background
	bit 5 = Green background
	bit 6 = Red background
	bit 7 = Bright background (blink characters)}

I wont talk about graphics mode since we wont need it :>
In our video.c code there is a function that is called cga_set_attr here we set an attribute of the text that will be written on screen to whatever color we need. You can find colors attributes as constants in the video.h header..Here is a snippet 

_{#define COLOR_DARK_GRAY 0x0700
#define COLOR_BLUE      0x0100
#define COLOR_GREEN     0x0200
#define COLOR_RED       0x0400
#define COLOR_GRAY      0x0800
#define COLOR_WHITE     0x0f00
#define BACKGROUND_GRAY 0x7000
#define BACKGROUND_BLUE 0x1000
#define BACKGROUND_GREEN        0x2000
#define BACKGROUND_RED  0x4000
#define BACKGROUND_BLINK        0x8000
#define BACKGROUND_WHITE        0xF000}
 you pass one or more (ORRED values) as argument to the cga_set_attr function and we get our text colored on the screen. 

* **CGA I/O 0x3D0~0x3DF Registers **

_{0x3D4	-	index register
0x3D5	-	data register
0x3D6	-	same as 0x3D4
0x3D7	-	same as 0x3D5

0x3D8	-	CGA mode control register
|->	bit 5 - blink register (if this bit is set the bits with attribute bit 7 will start blinking)
|->	bit 4 - 640*200 High-Resolution register ( if set CGA works in 2 color 640 wide mode, if not CGA works in 320 wide mode
|->	bit 3 - video register (if cleared the screen wont output)
|->	bit 2 - Monochrome (if set to one you get a 2 colors output black/white, if cleared you get compsite color mode)
|->	bit 1 - text mode (if set the video ram is treated bitmap graphics NOT TEXT, if cleared you work on text mode)
|->	bit 0 - Resolution (if set the video output is 80*25*2 if cleared the output is 40*25*2)

0x3D9	-	Palette Register / Color control register
|->	bit5 - chooses color set (if set color set is red/green/(brown/yellow), if cleared color set is magenta/cyan/white
|->	bit4 - if set the characters show in intense
|->	bit3 - intense border in 40*25 and intense background in 300*200 and intense foreground in 640*200
|->	bit2 - red borders in 40*25, red background in 300*200, red foreground in 640*200
|->	bit1 - green border in 40*25, red backround in 300*200, red foreground in 640*200
|->	bit0 - blute border in 40*25, red background in 300*200, red foreground in 640*200

0x3DA	-	Status register
|->	bit3 - if set then in vertical retrace, if this bit is set then RAM can be accessed without causing snow
|->	bit2 - the current status of the light pen switch cleared if on set if off
|->	bit1 - light pen trigger, the trigger is cleared by writing any value to port 0x3DB port
|->	bit0 - if this bit is set then the CPU can access the video ram and cause snow

0x3DB	-	clear light pen trigger
0x3DC	-	set   light pen trigger
}
if you took a look at video.c code you will find setters and getters for position. these work on the Index port 0x3d4 and data port 0x3d5. so I supply the index of the position i want to read which is 0xF for the first byte in the position and 0xE for the second byte and since we are working on a 80*25 then we wont need more than 4 bytes.
for getting the value i read from the data register after specifying the index i want to read and i inb the value coming from the data port. you might find the shifting and anding little confusing. so to clear that up i will give and example.
suppose the cursor position is at 0x5a0, so what you will first get is the first byte of the position which is 0xa0. and as you might have noticed we do no operations on that. but on the second position you get 0x05. the operations is for mixing the first byte and second byte so they would make 0x5a0
also you may notice that CGA_BUFF_OFFSET. which is the offset of the CGA video RAM in memory.

cga_putc:
what i do here is that i put the character i want to type on the screen to the CGA video RAM. and since we are working on 80*25 resolution bytes after the offset 0xB87D0 wont be written to screen yet they will be written to video RAM. this issue can be handled using memory trick like...move all binaries from 0xB8080 to 0xB87D0 80 byte backward which is the row size in 80*25 resolution. and then move the cursor position 80 place backward.

cga_putstr:
this function passes a pointer to an array of characters which are passed in a loop character at a time till we reach the null terminator character. and we actually wont need that!
on the cga_init function:
we set the address of the character buffer of the video RAM, and get the current cursor position so we don't work on garbage! 
