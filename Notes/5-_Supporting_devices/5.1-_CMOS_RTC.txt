Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2012-09-20T21:04:30+02:00

====== 5.1- CMOS RTC ======
Created Thursday 20 September 2012

We've supported the CMOS/RTC...Actually most of it! in cmos.c and cmos.h, for much of future usage.
The implementation of the code is a bit easy to understand a pretty much dynamic! Let's take a look at the code! 

Umm,Let's first talk about the 2nd function which is cmos_get_time. you see this function takes a byte as arugment and returns one byte, the byte it takes is the type of time you want to read! the argument must be one of these constants. which are defined in cmos.h header. [[./cmos.c]] 

Umm,Let's first talk about the 2nd function which is cmos_get_time. you see this function takes a byte as arugment and returns one byte, the byte it takes is the type of time you want to read! the argument must be one of these constants. which are defined in cmos.h header. 

_{#define	RTC_SECONDS	0x0
#define RTC_ALRMSECOND	0x1
#define RTC_MINUTES	0x2
#define RTC_ALRMMINUTE	0x3
#define RTC_HOUR	0x4
#define RTC_ALRMHOUR	0x5
#define RTC_DAY_WEEK	0x6
#define RTC_DAY_MONTH	0x7
#define RTC_MONTH	0x8
#define RTC_YEAR	0x9}

the time value will return as a hexdecimal decimal like format (BCD). So if today is 17 and you're reading the RTC_DAY_MONTH. you will get 0x17 as a return value instead of 0x11.
inside the function we first check if the rtc is updating using the 0A status register which means that the rtc is updating if the last bit was set(10000000 = 0x80), if it is updating just loop until it's not updating. then we clear interrupts flag and output what we want to read (one of the values above!) and we take output from the data port, if you are asking what are those index and data ports. then you really need to look up devices and I/O. But, I will make it a bit easy for you! these are the CMOS/RTC specs. 

_{0070	w	CMOS RAM index register port (ISA, EISA)
		 bit 7	 = 1  NMI disabled
			 = 0  NMI enabled
		 bit 6-0      CMOS RAM index (64 bytes, sometimes 128 bytes)}

 this is the CMOS index register and from that we give an order (we pass the index we want to read/write) this must be followed by an operation on the CMOS data register.
_{
0071	r/w	CMOS RAM data port (ISA, EISA)
		RTC registers:
		00    current second in BCD
		01    alarm second   in BCD
		02    current minute in BCD
		03    alarm minute   in BCD
		04    current hour in BCD
		05    alarm hour   in BCD
		06    day of week  in BCD
		07    day of month in BCD
		08    month in BCD
		09    year  in BCD (00-99)}

that is the data port and (some) of the indeces you can use!
Also the status register 0B is supported
as for CMOS status B , If you refrence CMOS ports you'll find this
Here's the the values in the register

_{bit 7 = 0  run
      = 1  halt
bit 6 = 1  enable periodic interrupt
bit 5 = 1  enable alarm interrupt
bit 4 = 1  enable update-ended interrupt
bit 3 = 1  enable square wave interrupt
bit 2 = 1  calendar is in binary format
      = 0  calendar is in BCD format
bit 1 = 1  24-hour mode
      = 0  12-hour mode
bit 0 = 1  enable daylight savings time.}

It's implemented in the function cmos_set_power_stat , what happens is that it reads the register value from the RTC into New_Stat , then in order to set the bits to the mode you want , simple OR for 1's and AND for 0's finally the resulting values will be put in the register again
The masking valuse are added in the cmos.h header 

_{#define STAT_HALT       0x80  
#define STAT_PER_INTR   0x40
#define STAT_ALRM_INTR  0x20
#define STAT_UPDT_INTR  0x10
#define STAT_SQRWV_INTR 0x08
#define STAT_CAL_BIN	0x04
#define STAT_CAL_BCD	0xFB     
#define STAT_CAL_HR24   0x02
#define STAT_CAL_HR12   0xFD     
#define STAT_DAY_LGHT   0x01}

